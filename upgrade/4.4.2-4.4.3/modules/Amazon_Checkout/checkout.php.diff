Index: modules/Amazon_Checkout/checkout.php
--- modules/Amazon_Checkout/checkout.php	2011-01-10 16:11:55.000000000 +0300
+++ modules/Amazon_Checkout/checkout.php	2011-04-08 13:59:18.000000000 +0400
@@ -40,7 +40,7 @@
  * @author     Ruslan R. Fazlyev <rrf@x-cart.com>
  * @copyright  Copyright (c) 2001-2011 Ruslan R. Fazlyev <rrf@x-cart.com>
  * @license    http://www.x-cart.com/license.php X-Cart license agreement
- * @version    $Id: checkout.php,v 1.8.2.2 2011/01/10 13:11:55 ferz Exp $
+ * @version    $Id: checkout.php,v 1.8.2.3 2011/04/08 09:59:18 aim Exp $
  * @link       http://www.x-cart.com/
  * @see        ____file_see____
  */
@@ -51,97 +51,81 @@
 
 define('ALL_CARRIERS', 1);
 
-function func_amazon_detect_state($state, $country)
-{
-    global $sql_tbl;
-    $state = strtolower(trim($state));
-    if ($s_code = func_query_first_cell("SELECT code FROM $sql_tbl[states] WHERE (LOWER(state)='$state' OR LOWER(code)='$state') AND country_code='$country'")) {
-        return $s_code;
-    } else {
-        return 'Other';
-    }
-}
-
-function func_amazon_header_exit($code)
-{
-    global $_SERVER;
-    $codes = array(500 => 'Internal Server Error', 403 => 'Forbidden', 503 => 'Service Unavailable');
-    @header("$_SERVER[SERVER_PROTOCOL] $code ".$codes[$code]);
-    exit;
-}
-
 if (defined('CHECKOUT_STARTED')) {
-    echo func_display('modules/Amazon_Checkout/waiting.tpl', $smarty, false);
-    require_once $xcart_dir.'/modules/Amazon_Checkout/cart.php';
-    $fields = array("order-input" => $encoded_cart);
-    func_create_payment_form("https://$amazon_host/checkout/".$config['Amazon_Checkout']['amazon_mid'], $fields, "Checkout by Amazon");
-    exit;
+// Start Amazon Checkout
+
+    if ($func_is_cart_empty)
+        return;
+    
+    x_load('xml');
+    func_acheckout_debug('*** XML REQUEST SENDING');
+    $xml_Order = func_amazon_xml1_Order($cart, $userinfo);
+    func_acheckout_debug("*** XML REQUEST:\n\n" . $xml_Order . "\n\n", true);
+    $encoded_cart = func_amazon_encode_cart($xml_Order);
+
+
+    //Save session data
+    x_session_register('gcheckout_saved_ips');
+    $gcheckout_saved_ips = array('ip' => $CLIENT_IP, 'proxy_ip' => $PROXY_IP);
+
+    func_acheckout_debug("\t+ Sending message: order-input");
+    func_amazon_submit_encoded_cart($encoded_cart);
+    x_session_save();
+    exit;        
 }
 elseif (defined('IS_STANDALONE')) {
+// Handle callbacks from Amazon Checkout
 
-    if (empty($_POST)) {
-        func_amazon_header_exit(403);
-    }
+    if (empty($active_modules['Amazon_Checkout']))
+        func_header_location($xcart_catalogs['customer']."/cart.php");
 
     x_load('xml','cart');
+    func_amazon_log_raw_post_get_data();
 
-    include_once $xcart_dir . '/shipping/shipping.php';
+    if ($mode == 'cancel') {
+        // Customer canceled the checkout by amazon
+        func_amazon_handle_cancel(@$skey);
+    } elseif ($mode == 'continue') {
+        // Customer returned to store from Amazon Checkout
+        func_amazon_handle_return(@$skey);
+    } else {
 
-    $parse_error = false;
-    $options = array(
-        'XML_OPTION_CASE_FOLDING' => 1,
-        'XML_OPTION_TARGET_ENCODING' => 'ISO-8859-1'
-    );
-
-    $request_data = $request_type = $root_node = '';
-    $allowed_requests = $trusted_post_variables;
-    foreach ($allowed_requests as $name) {
-        if (!empty($_POST[$name])) {
-            $request_type = $name;
-            $request_data = stripslashes(html_entity_decode($_POST[$name]));
-            break;
+        if (!func_amazon_is_validated_callback()) {
+            func_acheckout_debug("\t+ Signature test for callback is not passed");
+            func_amazon_header_exit(403);
         }
-    }
-
-    $check_sign = func_amazon_sign($_POST['UUID'].$_POST['Timestamp']);
 
-    // Save received data to the unique log file
-    $filename = $var_dirs['log'] . "/amazon-" . date("Ymd-His") . "-" . uniqid(rand()) . '.log.php';
-    if ($fd = @fopen($filename, "a+")) {
-
-        if ($check_sign != $_POST['Signature']) {
-            $str[] = "Wrong signature! ".$_POST['Signature'].' vs '.$check_sign;
+        $allowed_post_requests = $trusted_post_variables;
+        // Resolve type of callback
+        $request_data = $request_type = '';
+        foreach ($allowed_post_requests as $name) {
+            if (!empty($_POST[$name])) {
+                $request_type = $name;
+                $request_data = stripslashes($_POST[$name]);
+                break;
+            }
         }
 
-        foreach ($_POST as $k =>$v) {
-            if ($k != $request_type)
-                $str[] = "$k: $v";
+        $options = array(
+            'XML_OPTION_CASE_FOLDING' => 1,
+            'XML_OPTION_TARGET_ENCODING' => 'ISO-8859-1'
+        );
+        $parse_error = false;
+        $parsed = func_xml_parse($request_data, $parse_error, $options);
+
+        define('AMAZON_CHECKOUT_CALLBACK', 1);
+
+        func_acheckout_debug('*** CALLBACK RECEIVED');
+        func_acheckout_debug("\t+ Message received: $request_type");
+
+        if ($request_type == 'order-calculations-request') {
+            include_once $xcart_dir.'/modules/Amazon_Checkout/checkout_callback.php';
+        } elseif ($request_type == 'NotificationData') {
+            include_once $xcart_dir.'/modules/Amazon_Checkout/order_notifications.php';
+        } else {
+            func_acheckout_debug("\t+ unhandled callback request: $request_type");
         }
-
-        $str[] = "$request_type:\n $request_data";
-
-        fwrite($fd, "<?php die(); ?>\n\n" . implode("\n\n", $str));
-        fclose($fd);
-        func_chmod_file($filename);
     }
-
-    if ($check_sign != $_POST['Signature']) {
-        func_amazon_header_exit(403);
-    }
-
-    $parsed = func_xml_parse($request_data, $parse_error, $options);
-
-    if ($request_type == 'order-calculations-request') {
-        include_once $xcart_dir.'/modules/Amazon_Checkout/checkout_callback.php';
-    }
-    elseif ($request_type == 'order-calculations-error') {
-        // Reserved for future use
-        $root_node = 'ORDERCALCULATIONSERROR';
-    }
-    elseif ($request_type == 'NotificationData') {
-        include_once $xcart_dir.'/modules/Amazon_Checkout/order_notifications.php';
-    }
-
 }
 
 exit;
